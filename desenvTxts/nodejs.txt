- Instalar node JS
  ----------------

$ curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash -
$ sudo apt-get install nodejs
$ sudo apt-get install build-essential

- Testa a instalação

$ node -v
$ npm -v

- Configurar npm
  --------------

- Roda os comandos abaixo depois de instalar o npm

$ npm set init.author.name 'André Andrade'
$ npm set init.author.email 'alandrade21@gmail.com'
$ npm set init.author.url 'https://github.com/alandrade21'
$ npm adduser

- Esse último comando vai pedir seu usuário e sua senha no repositório npm, e será utilizado na hora de publicar pacotes.

- Verifica as configurações feitas com o comando 

$ npm config ls

- Instalar Dependência
  --------------------

Dependências de desenvolvimento
  $ npm i <pacote> -D
  ou
  $ npm install @types/node --save-dev

Dependências de RunTime
  $ npm i <pacote> -S

- Criação de componentes em TS
  ----------------------------

- Crie um novo diretório de projeto parq escrever o código do componente.

- Entre nesse diretório e inicialize o projeto com 
  $ npm init -y

- gera o arquivo tsconfig.json com o comando tsc --init.

- No tsconfig.json coloca a propriedade "declaration" : true. Isso vai gerar o arquivo de tipos .d.ts.

- Escreve o componente, de preferência no arquivo index.ts.

- Transpila o componente com tsc. O resultado vai aparecer na pasta ./dist.

- Completa o arquivo package.json com as entradas:

"main": "dist/index.js",
"types" : "dist/index.d.ts"

- Coloque seu namespace no nome do componente @alandrade21/<nome-do-componente>

- Compartilhando o código do componente em desenv
  -----------------------------------------------

- Para evitar publicar um componente antes do término do seu desenvolvimento, e ainda assim permitir seu uso em outros projetos, vamos linkar a pasta do componente no projeto.

- Vai para a pasta do componente e roda o comando

$ sudo npm link

- Isso cria um link global para o componente em /usr/lib/node_modules/@alandrade21/<nome-do-componente>. Por isso a permissão de sudo.

- Vai para a pasta do projeto que usará o componente e roda o comando

$ npm link <nome-do-componente>

- Publicar um pacote
  ------------------

- Coloca a entrada files no package.json, da seguinte forma:

“files”: [“dist/**/*”]

- Isso garante que apenas os arquivos necessários serão utilizados no empacotamento.

- loga no repositorio npm com o comando 

$ npm login

- Dentro do diretório do componente a ser publicado, publica o pacote com o comando 

$ npm publish

- Desfazer um link antes do build de produção
  -------------------------------------------

- Desfaça o link no projeto que consome o compenente.

$ npm uninstall --no-save <nome-do-componente>

- Instale o pacote a partir do npm

$ npm install

- O componente já está no package.json, é só rodar o comando acima para usar a versão publicada.

- Para apagar o link gloal, vai para o diretório do componente e roda

$ npm uninstall


