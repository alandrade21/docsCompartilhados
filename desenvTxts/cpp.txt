- GCC
 ----

Testa se o GCC está instalado rodando 
$ gcc
Se estiver instalado vai dar erro de arquivo de entrada não especificado. 
Se não estiver instalado, vai dar erro de comando não encontrado.

Se não estiver instalado, instala com
$ sudo apt-get install gcc
$ sudo apt-get install g++
$ sudo apt-get install gdb
$ sudo apt-get install clang

Para verificar as versões instaladas, rode cada comando com a opção -v

- VSCode
  ------

Instala a extensão c/c++.

Abre uma pasta e cria o primeiro arquivo .cpp. A IDE vai reconhecer como C++ e carregar o intelisense.

   -- Build
      -----

Para buildar, vai no menu Terminal>Configure Default Build Task... 
Seleciona from template e escolhe other
Vai criar um arquivo tasks.json na pasta .vscode
{
  // See https://go.microsoft.com/fwlink/?LinkId=733558
  // for the documentation about the tasks.json format
  "version": "2.0.0",
  "tasks": [
    {
      "label": "build",
      "type": "shell",
      "command": "g++ -g hello.cpp -o hello", --> Linha de comando que vai ser rodada
      "group": {
        "kind": "build",
        "isDefault": true -->  Indica que é esse que vai ser rodado em Terminal>Run Build Task...
      },
      "problemMatcher":"$gcc" --> Permite alimentar a aba Problems.
    }
  ]
}

Para rodar, vai no terminal e roda o prorama.

Para buildar projetos mais complicados, no lugar de rodar o g++, pode rodar um shell script que dispara o build.
Geralmente esse .sh fica dentro da pasta .vscode (se esse for o caso, o primeiro comando é dar um CD para a pasta do código.

   -- Debug
      -----

Para debugar, vai na aba lateral de debug e ao rodar o debug cria uma nova configuração.
Cria o arquivo launch.json em .vscode
{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
      "name": "(gdb) Launch",
      "type": "cppdbg",
      "request": "launch",
      "preLaunchTask": "build",                       --> Isso faz recompilar. É a task criada acima
      "program": "${workspaceFolder}/hello",          --> Configura isso.
      "args": [],
      "stopAtEntry": false,
      "cwd": "${workspaceFolder}",
      "environment": [],
      "externalConsole": true,
      "MIMode": "gdb",
      "setupCommands": [
        {
          "description": "Enable pretty-printing for gdb",
          "text": "-enable-pretty-printing",
          "ignoreFailures": true
        }
      ]
    }
  ]
}
O debug roda num terminal em separado.
